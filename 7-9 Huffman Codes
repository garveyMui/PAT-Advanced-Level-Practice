#include<iostream>
#include<stdlib.h>
#include<vector>
#include<map>
#include<algorithm>
#include<string>
#include<cstring>
using namespace std;
struct TreeNode {
    int val;
    char ch;
    TreeNode *left;
    TreeNode *right;
    TreeNode* parent;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), ch('\0'), left(nullptr), right(nullptr) {}
    TreeNode(int x, char c) : val(x), ch(c), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

template<>
struct std::greater<TreeNode*>{
    bool operator()(TreeNode* a, TreeNode* b){
        return a->val>b->val;
    }
};

struct wplCal{
    int deep=0, wpl=0;
    void post(TreeNode* root){
        if(!root) return;
        deep++;
        post(root->left);
        post(root->right);
        deep--;
        if(!root->left){
            wpl += deep*root->val;
        }
    }
};

struct trie{
    trie* child[2];
    bool isEnd;
    trie(){
        memset(child, 0, sizeof(child));
        isEnd = false;
    }
};
bool prefix(vector<string>& stu){
    trie myTrie;
    trie* cur = &myTrie;
    for(int i = 0; i < stu.size(); i++){
        cur = &myTrie;
        for(int j = 0; j < stu[i].size(); j++){
            if(stu[i][j]=='0'){
                if(cur->child[0]==nullptr){
                    cur->child[0] = new trie;
                }
                cur = cur->child[0];
            }else{
                if(cur->child[1]==nullptr){
                    cur->child[1] = new trie;
                }
                cur = cur->child[1];
            }
        }
        if(cur->child[0] || cur->child[1]){
            return false;
        }
        if(cur->isEnd == true){
            return false;
        }else{
            cur->isEnd = true;
        }
    }
    return true;
}
    
int main(void){
    int n;
    cin >> n;
    map<char, int> sigma;
    char tmp;
    vector<TreeNode*> nodes;
    for(int i = 0; i < n; i++){
        cin>>tmp;
        cin>>sigma[tmp];
        nodes.emplace_back(new TreeNode(sigma[tmp]));
    }
    make_heap(nodes.begin(), nodes.end(), greater<TreeNode*>());
    while(nodes.size()>1){
        TreeNode* a = nodes[0];
        pop_heap(nodes.begin(), nodes.end(), greater<TreeNode*>());
        nodes.pop_back();
        TreeNode* b = nodes[0];
        pop_heap(nodes.begin(), nodes.end(), greater<TreeNode*>());
        nodes.pop_back();
        nodes.emplace_back(new TreeNode (a->val+b->val));
        (*nodes.rbegin())->left=a;
        (*nodes.rbegin())->right=b;
        push_heap(nodes.begin(), nodes.end(), greater<TreeNode*>());
    }
    wplCal mwpl;
    mwpl.post(nodes[0]);
    int wpl = mwpl.wpl;
    int m;
    cin >> m;
    for(int i = 0; i < m; i++){
        vector<string> stu;
        string sti;
        int stuWpl=0;
        for(int j = 0; j < n; j++){
            cin >> tmp;
            cin >> sti;
            stu.emplace_back(sti);
            stuWpl += sigma[tmp]*(*stu.rbegin()).size();
        }
        if(stuWpl != wpl){
            cout << "No" << endl;
        }else if(!prefix(stu)){
            cout << "No" << endl;
        }else{
            cout << "Yes" << endl;
        }
    }
    return 0;
}
