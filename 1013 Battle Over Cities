//
//  main.c
//  20200404
//
//  Created by 梅佳伟 on 2020/4/4.
//  Copyright © 2020 梅佳伟. All rights reserved.
//
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define N 1001
#define MaxVerNum 1001

typedef int WeightType;
typedef int Vertex;

struct GNode{
    int Nv,Ne;
    WeightType Weight[MaxVerNum][MaxVerNum];
};
typedef struct GNode *Graph;

struct ENode{
    Vertex V1,V2;
    WeightType Weight;
};
typedef struct ENode *Edge;

Graph CreatGraph(int n)
{
    Graph G;
    G=malloc(sizeof(struct GNode));
    G->Nv=n;
    G->Ne=0;
    int i,j;
    for(i=0;i<G->Nv;i++)
    {
        for(j=0;j<G->Nv;j++)
        {
            G->Weight[i][j]=0;
        }
    }
    return G;
}
void InsertGraph(Graph G, Edge E)
{
    G->Weight[E->V1][E->V2]=E->Weight;
    G->Weight[E->V2][E->V1]=E->Weight;
}
Graph BuildGraph(int concernedCity[N])
{
    int n,m,k;
    scanf("%d %d %d",&n,&m,&k);
    Graph G;
    G=CreatGraph(n);
    G->Ne=m;
    int i;
    Edge E;
    E=malloc(sizeof(struct ENode));
    for(i=0;i<m;i++)
    {
        scanf("%d %d",&E->V1,&E->V2);
        E->V1--;E->V2--;
        E->Weight=1;
        InsertGraph(G,E);
    }
    concernedCity[0]=k;
    for(i=1;i<=k;i++)
    {
        scanf("%d",&concernedCity[i]);
        concernedCity[i]--;
    }
    return G;
}

struct QNode{
    int front,rear;
    int Data[N];
};
typedef struct QNode *Queue;
void Enqueue(int aim,Queue Q)
{
    if(Q->rear==-1)
    {
        Q->front=0;
    }
    Q->Data[++Q->rear]=aim;
}
int Dequeue(Queue Q)
{
    int result;
    result=Q->Data[Q->front++];
    if(Q->front>Q->rear)
    {
        Q->front=Q->rear=-1;
    }
    return result;
}
void BFS(Graph G,int aim,int visited[MaxVerNum],int concernedCity)
{
    Queue Q;
    Q=malloc(sizeof(struct QNode));
    Q->front=Q->rear=-1;
    Enqueue(aim,Q);
    visited[aim]=1;
    int tmp;
    Vertex i;
    while(Q->front!=-1)
    {
        tmp=Dequeue(Q);
        for(i=0;i<G->Nv;i++)
        {
            if(G->Weight[tmp][i]==1&&visited[i]==-1)
            {
                Enqueue(i,Q);
                visited[i]=1;
            }
        }
    }
}
void Check(Graph G,int concernedCity)
{
    Vertex i;
    int visited[MaxVerNum],j;
    for(j=0;j<G->Nv;j++)
    {
        visited[j]=-1;
    }
    visited[concernedCity]=1;
    int count=0;
    for(i=0;i<G->Nv;i++)
    {
        if(visited[i]==-1)
        {
            count++;
            BFS(G,i,visited,concernedCity);
        }
    }
    printf("%d\n",count-1);
}

int main()
 {
     Graph G;
     int concernedCity[N];
     G=BuildGraph(concernedCity);
     int i;
     for(i=1;i<=concernedCity[0];i++)
     {
         Check(G,concernedCity[i]);
     }
     return 0;
 }
