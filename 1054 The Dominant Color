#include<iostream>
#include<cstdio>
#define N 100
using std::cin;
using std::endl;
using std::cout;
class Pixel {
public:
    int nPixel; int* elem;
    Pixel(int n) {
        elem = new int [nPixel = n];
    }
    void inPut() {
        for (int i = 0; i < nPixel; i++) {
            scanf("%d", &elem[i]);
        }
    }
    void heapSort() {
        for (int i = nPixel / 2; i > 0; i--) {
            percDown(i, nPixel);
        }
        for (int i = nPixel; i > 1; i--) {
            swap(elem[0], elem[i-1]);
            percDown(1, i-1);
        }
    }
    void swap(int& a, int& b) {
        int c = a; a = b; b = c;
    }
    void percDown(int e, int n) {
        int pixel = elem[e-1];
        int i = e ;
        while ( 2*i <= n ) {
            i *= 2;
            if ((i + 1 <= n) && (elem[i - 1] < elem[i+1 - 1])) {
                i += 1;
            }
            if (pixel < elem[i - 1]) {
                elem[i/2 - 1] = elem[i - 1];
            }
            else {
                i /= 2;
                break;
            }
        }
        elem[i - 1] = pixel;
    }
    void outPut() {
        cout << statistic();
    }
    int statistic() {
        int count = 1;
        if (1 == nPixel) return elem[0];
        for (int i = 0; i < nPixel; i++) {
            if (elem[i] == elem[i + 1]) {
                count++;
            }
            else {
                if(count > nPixel/2) return elem[i];
                count = 1;
            }
        }
    }
};
int main() {
    int m, n;
    cin >> m >> n;
    Pixel p(m*n);
    p.inPut();
    p.heapSort();
    p.outPut();
    return 0;
}
